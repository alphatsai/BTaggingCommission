#### BTag Ntuples ( including ttbar selections )
## .py
runBTagAnalyzer_cfg.py

process.btagana.useSelectedTracks = False 
process.btagana.useTrackHistory = False 
process.btagana.fillsvTagInfo = True 
process.btagana.produceJetTrackTree = True 
process.btagana.produceAllTrackTree = True 
process.btagana.storeTagVariables = True 
process.btagana.storeCSVTagVariables = True

## For commissioning samples 
# Run2015: /eos/cms/store/group/phys_btag/Commissioning/TTbar/25ns/
Data13TeV_MuonEG_2015C
Data13TeV_MuonEG_2015D
MC13TeV_TTJets_powheg_pythia8
MC13TeV_DY10to50
MC13TeV_DY50toInf
MC13TeV_SingleTbar_tW
MC13TeV_SingleT_tW
MC13TeV_WWTo2L2Nu
MC13TeV_WZ
MC13TeV_ZZ

## Root contain
# tree
btagana/ttree
# tatal event number in TH1F
ttbarselectionproducer/wgtcounter GetBinContent(1)
allEventCount/hEventCount GetEntries()
# size 
7 Kbit/evt

#### Usage for macros in : RecoBTag/PerformanceMeasurements/test/BTagAnalyzerMacros
#### ttbar leptonic analysis codes #####
## .C 
1. TTbarSelector.C
    * Corrections and efficiency weighting
    * Event selection
        1. HLT
        2. nLeptons == 2
        3. e+mu channel 
        4. nJets >= 2
        5. Mass_ll >= 12 
    * Jets cleaning 
        1. far away from leptons dR > 0.4
        2. pt > 20
        3. |eta| < 2.4
    
2. CommPlotProducer4ttbar.C
    * Define class "CommPlotProducer4ttbar"
    * Use "TTbarSelector.C" to select event and objects
    * Only care e+mu channel : because clean without Z background.
    * Create plots
        * Jet related
            1. AddHisto()
                b  : 0
                pu : 1
                c  : 2
                lq : 3
                data : 4   
        * Datatype
            1. AddHistottbar()
               ttbar : 1  -> in HistoTTbar 0
               DellY : 2  -> in HistoTTbar 1
               SigleT: 3  -> in HistoTTbar 2
               ww    : 4  -> in HistoTTbar 3
               wz    : 5  -> in HistoTTbar 4
               zz    : 6  -> in HistoTTbar 5
               data  : 0  -> in HistoTTbar 6
          
    * Store plots.
        * Jets related
            1. Count multiplicity for SF
        nJets == 2 (pt>=30)
                Split 3 pT region <60, 60-120, 120-320
            2. multiplicity
            3. tracks in Jets
                n-1 plots                3-leading tracks
                * Selections
                    nHits > 7 
                    nPix  > 1
                    |ipZ| < 17
                    pT    > 1
                    Chi2  < 5
                    |dist|<0.07
                    length<5
                    |ip2D|<0.2
            4. TagVarCSV info
            5. SV related (nSV>0)
            6. Discrimenates
            7. Soft lepton
            8. PF leptons from jets
        * SF related
 
3. runCode4ttbar.C
    * Running the analysis code (class) : CommPlotProducer4ttbar.C (CommPlotProducer4ttbar)
    * Input merged-tree root file
    * Input weighting 
    * Systemetic uncertainty by vector "systlist" with special string (no commissioning plots with systs )
        * "__plus" and "__minus"
        * "lept", "trig", "PU", "jes", "jer", "PDF", "scale1", "scale2", "metuncls", "toppt", "btag", "mistag"

## .h
1. TTbarSelector.h
    * Define class "TTbarSelector"

2. CommPlotProducer4ttbar.h
    * Define class "CommPlotProducer4ttbar"
    * Load "../TTbarSelector.h"

#### ttbar leptonic plotting macros #####
## .C
1. DrawCommPlot4ttbar.C 


#### README.d #####

## To run the ttbar analysis in order to produce commissioning plots or performance to compute SF:

root -l
gROOT->ProcessLine(".L ../TTbarSelector.C+"); 
gROOT->ProcessLine(".L CommPlotProducer4ttbar.C++"); 
.x runCode4ttbar.C+

## To draw plots,

root -l
gROOT->ProcessLine(".L DrawCommPlot4ttbar.C++");

## In BTV-15-001:

Draw("track_IPs" , "3D IP significance of tracks",1); 
Draw("sv_flight3DSig","SV 3D flight distance significance",1); 
Draw("tagvarCSV_vertexmass_cat0","SV mass [GeV]",0); 
Draw("JP" ,"JP Discriminator",1); 
Draw("CSVv2","CSVv2 Discriminator",1); 
Draw("CSV" ,"CSVv2(AVR) Discriminator",1); 
Draw("JBP" ,"JBP Discriminator",1); 
Draw("SoftMu" ,"SM Discriminator",1); 
Draw("SoftEl" ,"SE Discriminator",1); 
Draw("cMVAv2","cMVAv2 Discriminator",1);

DrawTTbar("nbtag_all_afterJetSel_CSVv2M_SFapplied","number of b-tagged jets (CSVv2M)",0); 
DrawTTbar("nbtag_all_afterJetSel_CSVv2M","number of b-tagged jets (CSVv2M)",0);

## In AN-16-036:

Draw("jet_pt_all" ,"Jet pT",1); 
Draw("jet_eta" ,"Jet eta", 0); 
Draw("trk_multi_sel" , "Number of selected tracks in the jets",0); 
Draw("track_pt" , "Track p_{T}",1); 
Draw("track_nHit" , "number of hits",0); 
Draw("track_HPix" , "Number of hits in the Pixel",0); 
Draw("track_chi2" , "Normalized #chi^{2} of tracks" ,1); 
Draw("track_dist" , "Track distance to the jet axis" ,1); 
Draw("track_len" , "Track decay length",1); 
Draw("track_IP" , "3D IP of tracks",1); 
Draw("track_IPs" , "3D IP significance of tracks",1); 
Draw("sv_multi_0","nr. of SV including bin 0",1); 
Draw("sv_flight3DSig","SV 3D flight distance significance",1); 
Draw("sv_deltaR_jet","Delta R between the jet and the SV direction.",0); 
Draw("tagvarCSV_vertexmass_cat0","SV mass [GeV]",0); 
Draw("tagvarCSV_vertexmass3trk_cat0","SV mass (at least 3 tracks) [GeV]",0); 
Draw("tagvarCSV_vertexCategory","Vertex Category",1); 
Draw("pfmuon_multi" , "number of pf muons", 1); 
Draw("pfmuon_pt" , "p_{T} of pf muons [GeV]",1); 
Draw("pfmuon_ptrel" , "p_{T} rel. of pf muons [GeV]",0); 
Draw("JP" ,"JP Discriminator",1); 
Draw("JBP" ,"JBP Discriminator",1); 
Draw("CSVv2","CSVv2 Discriminator",1); 
Draw("cMVAv2","cMVAv2 Discriminator",1); 
Draw("CSV" ,"CSVv2(AVR) Discriminator",1); 

//// not anymore in the tree Draw("SoftEl" ,"SE Discriminator",1); Draw("SoftMu" ,"SM Discriminator",1); Draw("TCHP" ,"TCHP Discriminator",1); Draw("discri_ssche0", "SSVHE Discriminator", 1);

DrawTTbar("nbtag_all_afterJetSel_CSVv2L","number of b-tagged jets (CSVv2L)",0); 
DrawTTbar("nbtag_all_afterJetSel_CSVv2M","number of b-tagged jets (CSVv2M)",0); 
DrawTTbar("nbtag_all_afterJetSel_CSVv2T","number of b-tagged jets (CSVv2T)",0);

DrawTTbar("nbtag_all_afterJetSel_cMVAv2L","number of b-tagged jets (cMVAv2L)",0); 
DrawTTbar("nbtag_all_afterJetSel_cMVAv2M","number of b-tagged jets (cMVAv2M)",0); 
DrawTTbar("nbtag_all_afterJetSel_cMVAv2T","number of b-tagged jets (cMVAv2T)",0);

DrawTTbar("njet","number of jets",0);
